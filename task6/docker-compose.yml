services:        # D√©claration des services (conteneurs) de l'application

  back-end:      # Service API (Flask)
    build:                 # Construction de l'image depuis un Dockerfile local
      context: ./back-end  # R√©pertoire visible pendant le build (contient api.py et le Dockerfile du back)
      dockerfile: Dockerfile  # Fichier Dockerfile utilis√© pour ce service (dans ./back-end)
    image: softy-pinko-back-end:task4  # Nom/tag de l'image produite pour le back
    # ‚ö†Ô∏è Pas de "ports" expos√©s ‚Üí ce service n'est accessible qu'en interne via le r√©seau Docker
    # Le proxy pourra y acc√©der avec "http://back-end:5252"


  front-end:     # Service front (nginx)
    build:
      context: ./front-end     # R√©pertoire visible pendant le build (conf nginx et assets)
      dockerfile: Dockerfile   # Fichier Dockerfile utilis√© pour le front (dans ./front-end)
    image: softy-pinko-front-end:task4  # Nom/tag de l'image produite pour le front
    depends_on:
      - back-end               # Le front d√©pend du back (d√©marrage dans cet ordre)
    # ‚ö†Ô∏è Pas de "ports" expos√©s ‚Üí ce service n'est accessible qu'en interne via le r√©seau Docker
    # Le proxy pourra y acc√©der avec "http://front-end:9000"


  proxy:        # Service proxy (Nginx) qui fait office de point d'entr√©e unique
    build:
      context: ./proxy       # R√©pertoire utilis√© pendant le build (contient Dockerfile + proxy.conf)
      dockerfile: Dockerfile
    image: softy-pinko-proxy:task5
    ports:
      - "80:80"              # Expose le port 80 du conteneur sur le port 80 de l‚Äôh√¥te
                             # üëâ Le navigateur client se connecte uniquement √† http://localhost
    depends_on:
      - front-end            # Le proxy d√©pend du front (doit d√©marrer apr√®s lui)
      - back-end             # Le proxy d√©pend aussi du back
    # üëâ Le proxy redirigera les requ√™tes :
    #     - "/"      ‚Üí vers front-end:9000
    #     - "/api"   ‚Üí vers back-end:5252
